// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: projman-server/src/main/proto/api.proto
// </auto-generated>
#pragma warning disable 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Projman.Server {
  public static partial class Auth
  {
    static readonly string __ServiceName = "Auth";

    static readonly grpc::Marshaller<global::Projman.Server.LoginRequest> __Marshaller_LoginRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Projman.Server.LoginRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Projman.Server.LoginResult> __Marshaller_LoginResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Projman.Server.LoginResult.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Projman.Server.LogoutRequest> __Marshaller_LogoutRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Projman.Server.LogoutRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Projman.Server.LogoutResult> __Marshaller_LogoutResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Projman.Server.LogoutResult.Parser.ParseFrom);

    static readonly grpc::Method<global::Projman.Server.LoginRequest, global::Projman.Server.LoginResult> __Method_login = new grpc::Method<global::Projman.Server.LoginRequest, global::Projman.Server.LoginResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "login",
        __Marshaller_LoginRequest,
        __Marshaller_LoginResult);

    static readonly grpc::Method<global::Projman.Server.LogoutRequest, global::Projman.Server.LogoutResult> __Method_logout = new grpc::Method<global::Projman.Server.LogoutRequest, global::Projman.Server.LogoutResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "logout",
        __Marshaller_LogoutRequest,
        __Marshaller_LogoutResult);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Projman.Server.ApiReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Auth</summary>
    public abstract partial class AuthBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Projman.Server.LoginResult> login(global::Projman.Server.LoginRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Projman.Server.LogoutResult> logout(global::Projman.Server.LogoutRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Auth</summary>
    public partial class AuthClient : grpc::ClientBase<AuthClient>
    {
      /// <summary>Creates a new client for Auth</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public AuthClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Auth that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public AuthClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected AuthClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected AuthClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Projman.Server.LoginResult login(global::Projman.Server.LoginRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return login(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Projman.Server.LoginResult login(global::Projman.Server.LoginRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_login, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Projman.Server.LoginResult> loginAsync(global::Projman.Server.LoginRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return loginAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Projman.Server.LoginResult> loginAsync(global::Projman.Server.LoginRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_login, null, options, request);
      }
      public virtual global::Projman.Server.LogoutResult logout(global::Projman.Server.LogoutRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return logout(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Projman.Server.LogoutResult logout(global::Projman.Server.LogoutRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_logout, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Projman.Server.LogoutResult> logoutAsync(global::Projman.Server.LogoutRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return logoutAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Projman.Server.LogoutResult> logoutAsync(global::Projman.Server.LogoutRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_logout, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override AuthClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new AuthClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(AuthBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_login, serviceImpl.login)
          .AddMethod(__Method_logout, serviceImpl.logout).Build();
    }

  }
  public static partial class Projects
  {
    static readonly string __ServiceName = "Projects";

    static readonly grpc::Marshaller<global::Projman.Server.GetProjectsRequest> __Marshaller_GetProjectsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Projman.Server.GetProjectsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Projman.Server.GetProjectsResult> __Marshaller_GetProjectsResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Projman.Server.GetProjectsResult.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Projman.Server.GetProjectRequest> __Marshaller_GetProjectRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Projman.Server.GetProjectRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Projman.Server.GetProjectResult> __Marshaller_GetProjectResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Projman.Server.GetProjectResult.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Projman.Server.SaveProjectRequest> __Marshaller_SaveProjectRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Projman.Server.SaveProjectRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Projman.Server.SaveProjectResult> __Marshaller_SaveProjectResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Projman.Server.SaveProjectResult.Parser.ParseFrom);

    static readonly grpc::Method<global::Projman.Server.GetProjectsRequest, global::Projman.Server.GetProjectsResult> __Method_getProjects = new grpc::Method<global::Projman.Server.GetProjectsRequest, global::Projman.Server.GetProjectsResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getProjects",
        __Marshaller_GetProjectsRequest,
        __Marshaller_GetProjectsResult);

    static readonly grpc::Method<global::Projman.Server.GetProjectRequest, global::Projman.Server.GetProjectResult> __Method_getProject = new grpc::Method<global::Projman.Server.GetProjectRequest, global::Projman.Server.GetProjectResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getProject",
        __Marshaller_GetProjectRequest,
        __Marshaller_GetProjectResult);

    static readonly grpc::Method<global::Projman.Server.SaveProjectRequest, global::Projman.Server.SaveProjectResult> __Method_saveProject = new grpc::Method<global::Projman.Server.SaveProjectRequest, global::Projman.Server.SaveProjectResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "saveProject",
        __Marshaller_SaveProjectRequest,
        __Marshaller_SaveProjectResult);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Projman.Server.ApiReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of Projects</summary>
    public abstract partial class ProjectsBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Projman.Server.GetProjectsResult> getProjects(global::Projman.Server.GetProjectsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Projman.Server.GetProjectResult> getProject(global::Projman.Server.GetProjectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Projman.Server.SaveProjectResult> saveProject(global::Projman.Server.SaveProjectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Projects</summary>
    public partial class ProjectsClient : grpc::ClientBase<ProjectsClient>
    {
      /// <summary>Creates a new client for Projects</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ProjectsClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Projects that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ProjectsClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ProjectsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ProjectsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Projman.Server.GetProjectsResult getProjects(global::Projman.Server.GetProjectsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getProjects(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Projman.Server.GetProjectsResult getProjects(global::Projman.Server.GetProjectsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getProjects, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Projman.Server.GetProjectsResult> getProjectsAsync(global::Projman.Server.GetProjectsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getProjectsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Projman.Server.GetProjectsResult> getProjectsAsync(global::Projman.Server.GetProjectsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getProjects, null, options, request);
      }
      public virtual global::Projman.Server.GetProjectResult getProject(global::Projman.Server.GetProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getProject(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Projman.Server.GetProjectResult getProject(global::Projman.Server.GetProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getProject, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Projman.Server.GetProjectResult> getProjectAsync(global::Projman.Server.GetProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getProjectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Projman.Server.GetProjectResult> getProjectAsync(global::Projman.Server.GetProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getProject, null, options, request);
      }
      public virtual global::Projman.Server.SaveProjectResult saveProject(global::Projman.Server.SaveProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return saveProject(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Projman.Server.SaveProjectResult saveProject(global::Projman.Server.SaveProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_saveProject, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Projman.Server.SaveProjectResult> saveProjectAsync(global::Projman.Server.SaveProjectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return saveProjectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Projman.Server.SaveProjectResult> saveProjectAsync(global::Projman.Server.SaveProjectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_saveProject, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ProjectsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ProjectsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ProjectsBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_getProjects, serviceImpl.getProjects)
          .AddMethod(__Method_getProject, serviceImpl.getProject)
          .AddMethod(__Method_saveProject, serviceImpl.saveProject).Build();
    }

  }
  public static partial class Tasks
  {
    static readonly string __ServiceName = "Tasks";

    static readonly grpc::Marshaller<global::Projman.Server.GetTasksRequest> __Marshaller_GetTasksRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Projman.Server.GetTasksRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Projman.Server.GetTasksResult> __Marshaller_GetTasksResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Projman.Server.GetTasksResult.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Projman.Server.GetTaskRequest> __Marshaller_GetTaskRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Projman.Server.GetTaskRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Projman.Server.GetTaskResult> __Marshaller_GetTaskResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Projman.Server.GetTaskResult.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Projman.Server.SaveTaskRequest> __Marshaller_SaveTaskRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Projman.Server.SaveTaskRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Projman.Server.SaveTaskResult> __Marshaller_SaveTaskResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Projman.Server.SaveTaskResult.Parser.ParseFrom);

    static readonly grpc::Method<global::Projman.Server.GetTasksRequest, global::Projman.Server.GetTasksResult> __Method_getTasks = new grpc::Method<global::Projman.Server.GetTasksRequest, global::Projman.Server.GetTasksResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getTasks",
        __Marshaller_GetTasksRequest,
        __Marshaller_GetTasksResult);

    static readonly grpc::Method<global::Projman.Server.GetTaskRequest, global::Projman.Server.GetTaskResult> __Method_getTask = new grpc::Method<global::Projman.Server.GetTaskRequest, global::Projman.Server.GetTaskResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getTask",
        __Marshaller_GetTaskRequest,
        __Marshaller_GetTaskResult);

    static readonly grpc::Method<global::Projman.Server.SaveTaskRequest, global::Projman.Server.SaveTaskResult> __Method_saveTask = new grpc::Method<global::Projman.Server.SaveTaskRequest, global::Projman.Server.SaveTaskResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "saveTask",
        __Marshaller_SaveTaskRequest,
        __Marshaller_SaveTaskResult);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Projman.Server.ApiReflection.Descriptor.Services[2]; }
    }

    /// <summary>Base class for server-side implementations of Tasks</summary>
    public abstract partial class TasksBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Projman.Server.GetTasksResult> getTasks(global::Projman.Server.GetTasksRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Projman.Server.GetTaskResult> getTask(global::Projman.Server.GetTaskRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Projman.Server.SaveTaskResult> saveTask(global::Projman.Server.SaveTaskRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Tasks</summary>
    public partial class TasksClient : grpc::ClientBase<TasksClient>
    {
      /// <summary>Creates a new client for Tasks</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public TasksClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Tasks that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public TasksClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected TasksClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected TasksClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Projman.Server.GetTasksResult getTasks(global::Projman.Server.GetTasksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getTasks(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Projman.Server.GetTasksResult getTasks(global::Projman.Server.GetTasksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getTasks, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Projman.Server.GetTasksResult> getTasksAsync(global::Projman.Server.GetTasksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getTasksAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Projman.Server.GetTasksResult> getTasksAsync(global::Projman.Server.GetTasksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getTasks, null, options, request);
      }
      public virtual global::Projman.Server.GetTaskResult getTask(global::Projman.Server.GetTaskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getTask(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Projman.Server.GetTaskResult getTask(global::Projman.Server.GetTaskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getTask, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Projman.Server.GetTaskResult> getTaskAsync(global::Projman.Server.GetTaskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getTaskAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Projman.Server.GetTaskResult> getTaskAsync(global::Projman.Server.GetTaskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getTask, null, options, request);
      }
      public virtual global::Projman.Server.SaveTaskResult saveTask(global::Projman.Server.SaveTaskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return saveTask(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Projman.Server.SaveTaskResult saveTask(global::Projman.Server.SaveTaskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_saveTask, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Projman.Server.SaveTaskResult> saveTaskAsync(global::Projman.Server.SaveTaskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return saveTaskAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Projman.Server.SaveTaskResult> saveTaskAsync(global::Projman.Server.SaveTaskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_saveTask, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override TasksClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TasksClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(TasksBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_getTasks, serviceImpl.getTasks)
          .AddMethod(__Method_getTask, serviceImpl.getTask)
          .AddMethod(__Method_saveTask, serviceImpl.saveTask).Build();
    }

  }
  public static partial class Users
  {
    static readonly string __ServiceName = "Users";

    static readonly grpc::Marshaller<global::Projman.Server.GetUsersRequest> __Marshaller_GetUsersRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Projman.Server.GetUsersRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Projman.Server.GetUsersResult> __Marshaller_GetUsersResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Projman.Server.GetUsersResult.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Projman.Server.GetUserRequest> __Marshaller_GetUserRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Projman.Server.GetUserRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Projman.Server.GetUserResult> __Marshaller_GetUserResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Projman.Server.GetUserResult.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Projman.Server.SaveUserRequest> __Marshaller_SaveUserRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Projman.Server.SaveUserRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Projman.Server.SaveUserResult> __Marshaller_SaveUserResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Projman.Server.SaveUserResult.Parser.ParseFrom);

    static readonly grpc::Method<global::Projman.Server.GetUsersRequest, global::Projman.Server.GetUsersResult> __Method_getUsers = new grpc::Method<global::Projman.Server.GetUsersRequest, global::Projman.Server.GetUsersResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getUsers",
        __Marshaller_GetUsersRequest,
        __Marshaller_GetUsersResult);

    static readonly grpc::Method<global::Projman.Server.GetUserRequest, global::Projman.Server.GetUserResult> __Method_getUser = new grpc::Method<global::Projman.Server.GetUserRequest, global::Projman.Server.GetUserResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getUser",
        __Marshaller_GetUserRequest,
        __Marshaller_GetUserResult);

    static readonly grpc::Method<global::Projman.Server.SaveUserRequest, global::Projman.Server.SaveUserResult> __Method_saveUser = new grpc::Method<global::Projman.Server.SaveUserRequest, global::Projman.Server.SaveUserResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "saveUser",
        __Marshaller_SaveUserRequest,
        __Marshaller_SaveUserResult);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Projman.Server.ApiReflection.Descriptor.Services[3]; }
    }

    /// <summary>Base class for server-side implementations of Users</summary>
    public abstract partial class UsersBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Projman.Server.GetUsersResult> getUsers(global::Projman.Server.GetUsersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Projman.Server.GetUserResult> getUser(global::Projman.Server.GetUserRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Projman.Server.SaveUserResult> saveUser(global::Projman.Server.SaveUserRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Users</summary>
    public partial class UsersClient : grpc::ClientBase<UsersClient>
    {
      /// <summary>Creates a new client for Users</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public UsersClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Users that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public UsersClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected UsersClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected UsersClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Projman.Server.GetUsersResult getUsers(global::Projman.Server.GetUsersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getUsers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Projman.Server.GetUsersResult getUsers(global::Projman.Server.GetUsersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getUsers, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Projman.Server.GetUsersResult> getUsersAsync(global::Projman.Server.GetUsersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getUsersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Projman.Server.GetUsersResult> getUsersAsync(global::Projman.Server.GetUsersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getUsers, null, options, request);
      }
      public virtual global::Projman.Server.GetUserResult getUser(global::Projman.Server.GetUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getUser(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Projman.Server.GetUserResult getUser(global::Projman.Server.GetUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getUser, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Projman.Server.GetUserResult> getUserAsync(global::Projman.Server.GetUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getUserAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Projman.Server.GetUserResult> getUserAsync(global::Projman.Server.GetUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getUser, null, options, request);
      }
      public virtual global::Projman.Server.SaveUserResult saveUser(global::Projman.Server.SaveUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return saveUser(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Projman.Server.SaveUserResult saveUser(global::Projman.Server.SaveUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_saveUser, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Projman.Server.SaveUserResult> saveUserAsync(global::Projman.Server.SaveUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return saveUserAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Projman.Server.SaveUserResult> saveUserAsync(global::Projman.Server.SaveUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_saveUser, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override UsersClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new UsersClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(UsersBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_getUsers, serviceImpl.getUsers)
          .AddMethod(__Method_getUser, serviceImpl.getUser)
          .AddMethod(__Method_saveUser, serviceImpl.saveUser).Build();
    }

  }
}
#endregion
